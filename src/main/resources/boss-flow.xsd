<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://www.wicketstuff.cz/p/boss-flow/flowXmlModel"
	elementFormDefault="qualified" xmlns:flow="http://www.wicketstuff.cz/p/boss-flow/flowXmlModel">

	<complexType name="StateType">
		<annotation>
			<documentation>General precendant of all statuses. Each status is
				mandatory described by its name and transitions those are available
				for the status. ID should be autogenerated.
			</documentation>
		</annotation>
		<sequence>
			<element name="transition" type="flow:TransitionIdentifierType"
				maxOccurs="unbounded" minOccurs="0">
			</element>
		</sequence>
		<attribute name="finalState" type="boolean" default="false">
			<annotation>
				<documentation>If 'true' state is a final state and any transition
					of this state have no sense.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="initialState" type="boolean" default="false">
			<annotation>
				<documentation>If 'true' this state is an initial state. It means the
					flow can start here.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="defaultInitialState" type="boolean" default="false">
			<annotation>
				<documentation>If 'true' this state is an initial state. It means the
					flow starts here if no initial state in flow is defined.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="requireStateData" type="boolean" default="false">
			<annotation>
				<documentation>If 'true' state data is required when the state is
					entered. The data factory method is called to create or load data
					object.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="stateValidatable" type="boolean" default="false">
			<annotation>
				<documentation>If 'true' state is validated when a transition is
					leaving the state. If state is not valid transition is not applied.
				</documentation>
			</annotation>
		</attribute>
		<attribute name="persistableState" type="boolean" default="true">
			<annotation>
				<documentation>If 'true' the state can be persisted into database or
					a storage.
				</documentation>
			</annotation>
		</attribute>
		<attributeGroup ref="flow:IdentifierAttributeGroup"></attributeGroup>
	</complexType>

	<complexType name="RealStateType">
		<annotation>
			<documentation>A real state is a state that the flow can stand by
				until a next transition is invoked.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:StateType"></extension>
		</complexContent>
	</complexType>

	<complexType name="VirtualStateType">
		<annotation>
			<documentation>The state is a virtual state. It mean flow cannot
				stand by this state or it has no sense to stand by. It is usually a
				condition state that just redirect flow to another state that can be
				also real or virtual.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:StateType"></extension>
		</complexContent>
	</complexType>

	<complexType name="ViewStateType">
		<annotation>
			<documentation>The state is representing a view or a display content.
				It is usually a page in MVC frameworks.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:RealStateType">
				<sequence minOccurs="0" maxOccurs="1">
					<element name="viewName" type="string">
						<annotation>
							<documentation>The name of view associated to this view state. It
								should be page name for MVC frameworks.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="JoinStateType">
		<annotation>
			<documentation>A virtual state that just joins many transitions into
				once. It is used to redirect to another state. This state is useful
				to add state or transition listeners or when refactoring of flow is
				expected and it is more easy to change just one target.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:VirtualStateType">
				<sequence>
					<element name="nextTransition" type="flow:TransitionIdentifierType">
						<annotation>
							<documentation>The transition that is ever invoked when flow
								eneters this state.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="SwitchStateType">
		<annotation>
			<documentation>Similar to 'switch' statement in java programming
				language.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:VirtualStateType">
				<sequence>
					<element name="switchExpression" type="string" maxOccurs="1"
						minOccurs="1">
						<annotation>
							<documentation>The name of the expression that can return a
								String result that is used to compare cases such as 'switch'
								statement does.
							</documentation>
						</annotation>
					</element>
					<element name="defaultTransition" type="flow:TransitionIdentifierType"
						maxOccurs="1" minOccurs="1">
						<annotation>
							<documentation>A transition that is invoked as default transition
								when none of switch cases matches.
							</documentation>
						</annotation>
					</element>
					<element name="switchCase" type="flow:SwitchCaseType"
						maxOccurs="unbounded" minOccurs="0">
						<annotation>
							<documentation>A simple case that is tested to be equal to the
								switch expression result.
							</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="ConditionStateType">
		<annotation>
			<documentation>Similar to 'if' statement in java programming
				language.
			</documentation>
		</annotation>
		<complexContent>
			<extension base="flow:VirtualStateType">
				<sequence>
					<element name="conditionExpression" type="string"
						maxOccurs="1" minOccurs="1">
						<annotation>
							<documentation>The name the expression that is used to get the
								result (true or false). The principle of getting expressions by
								name depends on framework settings. There are few implementing
								classes included annotations.
							</documentation>
						</annotation>
					</element>
					<element name="thenTransition" type="flow:TransitionIdentifierType"
						maxOccurs="1" minOccurs="1">
						<annotation>
							<documentation>Transition that is invoked when the result of the
								expression is 'true'.
							</documentation>
						</annotation>
					</element>
					<element name="elseTransition" type="flow:TransitionIdentifierType"
						maxOccurs="1" minOccurs="1">
						<annotation>
							<documentation>Transition that is invoked when the result of the
								expression is 'false'.
							</documentation>
						</annotation>
					</element>
				</sequence>

			</extension>
		</complexContent>
	</complexType>


	<complexType name="TransitionType">
		<annotation>
			<documentation>The transition element. This element describe a
				transition. Each transition is mandatory described by name and
				target state. ID is optional, it should be autogenerated.
			</documentation>
		</annotation>
		<attribute name="hitCountable" type="boolean" default="true">
			<annotation>
				<documentation>Tell if this transition increase hit counter while
					the transition is processing.
				</documentation>
			</annotation>
		</attribute>
		<attributeGroup ref="flow:IdentifierAttributeGroup"></attributeGroup>
		<attributeGroup ref="flow:TargetRefIdentifierAttributeGroup"></attributeGroup>
	</complexType>

	<element name="flowDescriptor" type="flow:FlowDescriptorType"></element>

	<complexType name="FlowDescriptorType">
		<annotation>
			<documentation>Main element describing whole flow.</documentation>
		</annotation>
		<sequence>
			<element name="flowId" type="int" minOccurs="1" maxOccurs="1">
				<annotation>
					<documentation>Unique ID of this flow, usually used for database
						that require a numeric identifier.
					</documentation>
				</annotation>
			</element>
			<element name="flowName" type="string" minOccurs="1"
				maxOccurs="1">
				<annotation>
					<documentation>A name of this flow.</documentation>
				</annotation>
			</element>
			<element name="flowDescription" type="string" minOccurs="0"
				maxOccurs="1">
				<annotation>
					<documentation>A description of this flow. It is just a flow
						documentation.
					</documentation>
				</annotation>
			</element>
			<element name="author" type="string" minOccurs="0"
				maxOccurs="1">
				<annotation>
					<documentation>Author of this flow descriptor
					</documentation>
				</annotation>
			</element>
			<choice maxOccurs="unbounded">
				<element name="state" type="flow:StateType" maxOccurs="unbounded"
					minOccurs="0">
					<annotation>
						<documentation>Basic states. All subtypes has its
							own element to
							define them.
						</documentation>
					</annotation>
				</element>
				<element name="realState" type="flow:RealStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Real states, for view use viewState element. All
							subtypes has its
							own element to define them.
						</documentation>
					</annotation>
				</element>
				<element name="viewState" type="flow:ViewStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>View states such as pages or windows in MVC. There
							are no subtypes
							yet.
						</documentation>
					</annotation>
				</element>
				<element name="virtualState" type="flow:VirtualStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Virtual states are any self processing states. All
							subtypes has its
							own element to define them.
						</documentation>
					</annotation>
				</element>
				<element name="joinState" type="flow:JoinStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Join states are just forwards to the next state
							defined by nextTransition element. There are no subtypes
							yet.
						</documentation>
					</annotation>
				</element>
				<element name="conditionState" type="flow:ConditionStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Condition states are similar to 'if' statement in
							java programming language. There are no
							subtypes yet.
						</documentation>
					</annotation>
				</element>
				<element name="switchState" type="flow:SwitchStateType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Switch states are similar to 'switch' statement in
							java programming language. There are no subtypes
							yet.
						</documentation>
					</annotation>
				</element>
				<element name="transition" type="flow:TransitionType"
					maxOccurs="unbounded" minOccurs="0">
					<annotation>
						<documentation>Transitions are routes between states. A transition
							defines just its target state. The source state is defined in a
							reverse way that means each state defines its transitions.
						</documentation>
					</annotation>
				</element>
			</choice>
		</sequence>
	</complexType>

	<complexType name="TransitionIdentifierType">
		<annotation>
			<documentation>Identification of a referenced transition. It is
				identificated just by name that is ever required.
			</documentation>
		</annotation>
		<attributeGroup ref="flow:RefIdentifierAttributeGroup"></attributeGroup>
	</complexType>

	<complexType name="StateIdentifierType">
		<annotation>
			<documentation>Referenced state identification. It is identified by
				name that is ever required.
			</documentation>
		</annotation>
		<attributeGroup ref="flow:RefIdentifierAttributeGroup"></attributeGroup>
	</complexType>

	<complexType name="SwitchCaseType">
		<annotation>
			<documentation>Similar to 'case' statement of 'switch' statement in
				java programming language.
			</documentation>
		</annotation>
		<sequence>
			<element name="transition" type="flow:TransitionIdentifierType"
				maxOccurs="1" minOccurs="0">
				<annotation>
					<documentation>A transition that is invoked when value equals to
						the switch state expression result.
					</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="caseValue" type="string" use="required">
			<annotation>
				<documentation>The tested String value.</documentation>
			</annotation>
		</attribute>
	</complexType>

	<attributeGroup name="IdentifierAttributeGroup">
		<attribute name="name" type="string">
			<annotation>
				<documentation>String name of status or transition.</documentation>
			</annotation>
		</attribute>
		<attribute name="id" type="int">
			<annotation>
				<documentation>Unique ID of this transition or status, usually used
					for database that require a numeric identifier. ID or name
					identification is required. Even if ID is missing it should be
					autogenerated by framework (depends on settings).
				</documentation>
			</annotation>
		</attribute>
	</attributeGroup>

	<attributeGroup name="RefIdentifierAttributeGroup">
		<attribute name="refName" type="string" use="required">
			<annotation>
				<documentation>Referenced transition name.</documentation>
			</annotation>
		</attribute>
	</attributeGroup>

	<attributeGroup name="TargetRefIdentifierAttributeGroup">
		<attribute name="targetStateName" type="string" use="required">
			<annotation>
				<documentation>The name of state that is the target of a transition.
					It means transition change state from a state to the target state.
				</documentation>
			</annotation>
		</attribute>
	</attributeGroup>


</schema>